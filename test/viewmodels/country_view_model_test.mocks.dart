// Mocks generated by Mockito 5.4.0 from annotations
// in country/test/viewmodels/country_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:country/models/country.dart' as _i2;
import 'package:country/repositories/country_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCountry_0 extends _i1.SmartFake implements _i2.Country {
  _FakeCountry_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CountryRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountryRepositoryImpl extends _i1.Mock
    implements _i3.CountryRepositoryImpl {
  MockCountryRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Country>> getCountryList() => (super.noSuchMethod(
        Invocation.method(
          #getCountryList,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Country>>.value(<_i2.Country>[]),
      ) as _i4.Future<List<_i2.Country>>);
  @override
  _i4.Future<_i2.Country> getCountry({required String? name}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCountry,
          [],
          {#name: name},
        ),
        returnValue: _i4.Future<_i2.Country>.value(_FakeCountry_0(
          this,
          Invocation.method(
            #getCountry,
            [],
            {#name: name},
          ),
        )),
      ) as _i4.Future<_i2.Country>);
}
